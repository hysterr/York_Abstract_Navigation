// Code generaetion for preamble.
mdp

// Model parameters
const int start = 1;
const int final = 9; 

// Create action selections
const int a_s1 = 3; 	// Selected action in the range 1 to 4;
const int a_s2 = 1; 	// Selected action in the range 1 to 3;
const int a_s3 = 1; 	// Selected action in the range 1 to 3;
const int a_s4 = 2; 	// Selected action in the range 1 to 3;
const int a_s5 = 2; 	// Selected action in the range 1 to 3;
const int a_s6 = 4; 	// Selected action in the range 1 to 7;
const int a_s7 = 3; 	// Selected action in the range 1 to 4;
const int a_s8 = 1; 	// Selected action in the range 1 to 6;
const int a_s9 = 1; 	// Selected action in the range 1 to 3;
const int a_s10 = 2; 	// Selected action in the range 1 to 3;
const int a_s11 = 2; 	// Selected action in the range 1 to 3;



module workflow
	end : bool init false;
	s : [0..11] init 1;

	[s1_s2] (s=1) & (a_s1=1) & (!end) -> 0.58:(s'=2) + 0.34:(s'=1) + 0.08:(s'=0); 
	[s1_s6] (s=1) & (a_s1=2) & (!end) -> 0.69:(s'=6) + 0.25:(s'=1) + 0.06:(s'=0); 
	[s1_s8] (s=1) & (a_s1=3) & (!end) -> 0.89:(s'=8) + 0.09:(s'=1) + 0.02:(s'=0); 
	[s1_s10] (s=1) & (a_s1=4) & (!end) -> 0.75:(s'=10) + 0.2:(s'=1) + 0.05:(s'=0); 
	[s2_s1] (s=2) & (a_s2=1) & (!end) -> 0.85:(s'=1) + 0.12:(s'=2) + 0.03:(s'=0); 
	[s2_s3] (s=2) & (a_s2=2) & (!end) -> 0.53:(s'=3) + 0.38:(s'=2) + 0.09:(s'=0); 
	[s2_s6] (s=2) & (a_s2=3) & (!end) -> 0.79:(s'=6) + 0.17:(s'=2) + 0.04:(s'=0); 
	[s3_s2] (s=3) & (a_s3=1) & (!end) -> 0.69:(s'=2) + 0.25:(s'=3) + 0.06:(s'=0); 
	[s3_s4] (s=3) & (a_s3=2) & (!end) -> 0.64:(s'=4) + 0.29:(s'=3) + 0.07:(s'=0); 
	[s3_s6] (s=3) & (a_s3=3) & (!end) -> 0.83:(s'=6) + 0.14:(s'=3) + 0.03:(s'=0); 
	[s4_s3] (s=4) & (a_s4=1) & (!end) -> 0.86:(s'=3) + 0.11:(s'=4) + 0.03:(s'=0); 
	[s4_s5] (s=4) & (a_s4=2) & (!end) -> 0.89:(s'=5) + 0.09:(s'=4) + 0.02:(s'=0); 
	[s4_s6] (s=4) & (a_s4=3) & (!end) -> 0.73:(s'=6) + 0.22:(s'=4) + 0.05:(s'=0); 
	[s5_s4] (s=5) & (a_s5=1) & (!end) -> 0.54:(s'=4) + 0.37:(s'=5) + 0.09:(s'=0); 
	[s5_s6] (s=5) & (a_s5=2) & (!end) -> 0.6:(s'=6) + 0.32:(s'=5) + 0.08:(s'=0); 
	[s5_s7] (s=5) & (a_s5=3) & (!end) -> 0.61:(s'=7) + 0.31:(s'=5) + 0.08:(s'=0); 
	[s6_s1] (s=6) & (a_s6=1) & (!end) -> 0.87:(s'=1) + 0.1:(s'=6) + 0.03:(s'=0); 
	[s6_s2] (s=6) & (a_s6=2) & (!end) -> 0.66:(s'=2) + 0.27:(s'=6) + 0.07:(s'=0); 
	[s6_s3] (s=6) & (a_s6=3) & (!end) -> 0.76:(s'=3) + 0.19:(s'=6) + 0.05:(s'=0); 
	[s6_s4] (s=6) & (a_s6=4) & (!end) -> 0.75:(s'=4) + 0.2:(s'=6) + 0.05:(s'=0); 
	[s6_s5] (s=6) & (a_s6=5) & (!end) -> 0.6:(s'=5) + 0.32:(s'=6) + 0.08:(s'=0); 
	[s6_s7] (s=6) & (a_s6=6) & (!end) -> 0.51:(s'=7) + 0.39:(s'=6) + 0.1:(s'=0); 
	[s6_s8] (s=6) & (a_s6=7) & (!end) -> 0.6:(s'=8) + 0.32:(s'=6) + 0.08:(s'=0); 
	[s7_s5] (s=7) & (a_s7=1) & (!end) -> 0.82:(s'=5) + 0.14:(s'=7) + 0.04:(s'=0); 
	[s7_s6] (s=7) & (a_s7=2) & (!end) -> 0.81:(s'=6) + 0.15:(s'=7) + 0.04:(s'=0); 
	[s7_s8] (s=7) & (a_s7=3) & (!end) -> 0.87:(s'=8) + 0.1:(s'=7) + 0.03:(s'=0); 
	[s7_s9] (s=7) & (a_s7=4) & (!end) -> 0.79:(s'=9) + 0.17:(s'=7) + 0.04:(s'=0); 
	[s8_s1] (s=8) & (a_s8=1) & (!end) -> 0.63:(s'=1) + 0.3:(s'=8) + 0.07:(s'=0); 
	[s8_s6] (s=8) & (a_s8=2) & (!end) -> 0.74:(s'=6) + 0.21:(s'=8) + 0.05:(s'=0); 
	[s8_s7] (s=8) & (a_s8=3) & (!end) -> 0.75:(s'=7) + 0.2:(s'=8) + 0.05:(s'=0); 
	[s8_s9] (s=8) & (a_s8=4) & (!end) -> 0.79:(s'=9) + 0.17:(s'=8) + 0.04:(s'=0); 
	[s8_s10] (s=8) & (a_s8=5) & (!end) -> 0.85:(s'=10) + 0.12:(s'=8) + 0.03:(s'=0); 
	[s8_s11] (s=8) & (a_s8=6) & (!end) -> 0.56:(s'=11) + 0.35:(s'=8) + 0.09:(s'=0); 
	[s9_s7] (s=9) & (a_s9=1) & (!end) -> 0.69:(s'=7) + 0.25:(s'=9) + 0.06:(s'=0); 
	[s9_s8] (s=9) & (a_s9=2) & (!end) -> 0.62:(s'=8) + 0.3:(s'=9) + 0.08:(s'=0); 
	[s9_s11] (s=9) & (a_s9=3) & (!end) -> 0.52:(s'=11) + 0.38:(s'=9) + 0.1:(s'=0); 
	[s10_s1] (s=10) & (a_s10=1) & (!end) -> 0.75:(s'=1) + 0.2:(s'=10) + 0.05:(s'=0); 
	[s10_s8] (s=10) & (a_s10=2) & (!end) -> 0.56:(s'=8) + 0.35:(s'=10) + 0.09:(s'=0); 
	[s10_s11] (s=10) & (a_s10=3) & (!end) -> 0.68:(s'=11) + 0.26:(s'=10) + 0.06:(s'=0); 
	[s11_s8] (s=11) & (a_s11=1) & (!end) -> 0.67:(s'=8) + 0.26:(s'=11) + 0.07:(s'=0); 
	[s11_s9] (s=11) & (a_s11=2) & (!end) -> 0.8:(s'=9) + 0.16:(s'=11) + 0.04:(s'=0); 
	[s11_s10] (s=11) & (a_s11=3) & (!end) -> 0.76:(s'=10) + 0.19:(s'=11) + 0.05:(s'=0); 

	[end] (!end) & (s=0 | s=final) -> (end'=true);

endmodule



rewards "distance" 
	[s1_s2] true : 1.0;
	[s1_s6] true : 2.5;
	[s1_s8] true : 3.0;
	[s1_s10] true : 3.0;
	[s2_s1] true : 1.0;
	[s2_s3] true : 1.0;
	[s2_s6] true : 1.5;
	[s3_s2] true : 1.0;
	[s3_s4] true : 1.0;
	[s3_s6] true : 1.0;
	[s4_s3] true : 1.0;
	[s4_s5] true : 1.0;
	[s4_s6] true : 1.5;
	[s5_s4] true : 1.0;
	[s5_s6] true : 1.5;
	[s5_s7] true : 1.0;
	[s6_s1] true : 2.5;
	[s6_s2] true : 1.5;
	[s6_s3] true : 1.0;
	[s6_s4] true : 1.5;
	[s6_s5] true : 1.5;
	[s6_s7] true : 1.5;
	[s6_s8] true : 2.0;
	[s7_s5] true : 1.0;
	[s7_s6] true : 1.5;
	[s7_s8] true : 1.5;
	[s7_s9] true : 1.0;
	[s8_s1] true : 3.0;
	[s8_s6] true : 2.0;
	[s8_s7] true : 1.5;
	[s8_s9] true : 1.5;
	[s8_s10] true : 1.5;
	[s8_s11] true : 2.0;
	[s9_s7] true : 1.0;
	[s9_s8] true : 1.5;
	[s9_s11] true : 2.0;
	[s10_s1] true : 3.0;
	[s10_s8] true : 1.5;
	[s10_s11] true : 2.0;
	[s11_s8] true : 2.0;
	[s11_s9] true : 2.0;
	[s11_s10] true : 2.0;
endrewards